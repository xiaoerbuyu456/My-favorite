字符          数值
I             1
V             5
X             10
L             50
C             100
D             500
M             1000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/roman-to-integer
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。

通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：

I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。
X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 
C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。
给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内。

//罗马数字转整数
void romantoint()
{
	printf("please input the roman\n");
	int len=5;
	int str=0;
	char ch;
  //动态数组的输入
	char * roman;
	roman=(char*)malloc(sizeof(char)*len);
	while(ch!='\n')
	{
		ch=getchar();	
		str++;
		if(str>5)
		{
			len++;
			roman=(char*)realloc(roman,sizeof(char)*len);
		}
		
		roman[str-1]=ch;
	}
  //对输入数组的元素进行解析计算
	int toint;
	for(int i=0;i<len;i++)
	{
		switch (roman[i])
		{
	case 'I':
		if(roman[i+1]=='X')
		{
			toint += 9;
			i++;
		}
		else if(roman[i+1]=='V')
		{
			toint += 4;
			i++;
		}
		else
			toint += 1;
		break;
	case 'V':
		toint += 5;
		break;
	case 'X':
		if(roman[i+1]=='L')
		{
			toint += 40;
			i++;
		}
		else if(roman[i+1]=='C')
		{
			toint += 90;
			i++;
		}
		toint += 10;
		break;
	case 'L':
		toint += 50;
		break;
	case 'C':
		if(roman[i+1]=='D')
		{
			toint += 400;
			i++;
		}
		else if(roman[i+1]=='M')
		{
			toint += 900;
			i++;
		}
		else
		toint += 100;
		break;
	case 'D':
		toint += 500;
		break;
	case 'M':
		toint += 1000;
		break;
defult:
		break;
	   }
	}
	printf("The result is:%d\n",toint);
}
