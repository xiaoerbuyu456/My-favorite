理解方式一：
typedef int (*CallBackFun)(char *p);//为回调函数命名，类型命名为CallBackFun，参数为char *p
int Afun(char *p)
{
	cout<<"Afun callback%s\n"<<p<<endl;
	cout<<"Afun callback1"<<endl;
	cout<<"Afun callback2"<<endl;
	return 0;

}
int Cfun(char *p)
{
	cout<<"Cfun callback%s\n"<<p<<endl;
	cout<<"Cfun callback1"<<endl;
	cout<<"Cfun callback2"<<endl;
	cout<<"Cfun callback3"<<endl;
	cout<<"Cfun callback4"<<endl;
	return 0;
}
//执行回调函数方式一
int call(CallBackFun pCallBack, char *p)
{
	cout<<"cout type one callback%s\n"<<p<<endl;
 	pCallBack(p);
    cout<<"After callback1\n"<<endl;
	cout<<"After callback2\n"<<endl;
	cout<<"After callback3\n"<<endl;
	cout<<"After callback4\n"<<endl;
	cout<<"After callback5\n"<<endl;
	return 0;
}
执行回掉函数方法二
int call2(char *p, int (*ptr)())
{
	printf("=======\n");
	(*ptr)(p);

}
int main(array<System::String ^> ^args)
{
    Console::WriteLine(L"Hello World");
 	cout<<"Afun回调函数字符\n"<<endl;
	char *p ="hello";
	call(Afun,p);//使用回调方式一进行调用回调函数Afun
	call(Cfun,p);//使用回调方式一进行调用回调函数Cfun
}
理解方式二：
指针函数本质是一个函数，其返回值为指针。
函数指针本质是一个指针，其指向一个函数。
指针函数：int* fun(int x,int y);//是一个函数只不过函数返回类型是int*型
函数指针：int (*fun)(int x,int y);//是一个函数类型的指针（如int*）指向一个函数可以类比int*的用法
暂时没有整理
问题总结：
（1）回调函数与普通函数调用的区别
	普通函数：调用-->等待被调用函数执行完毕-->继续执行
	回掉函数：调用程序发出对回调函数的调用后，不等函数执行完毕，立即返回并继续执行。
		 这样，调用程序执和被调用函数同时在执行。当被调函数执行完毕后，被调函数会反过来调用某个事先指定函数，
		 以通知调用程序：函数调用结束。这个过程称为回调（Callback），这正是回调函数名称的由来。

（2）回调函数与多线程的区别

（3）回调函数与中断
